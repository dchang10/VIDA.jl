var documenterSearchIndex = {"docs":
[{"location":"api/function_index/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/function_index/","page":"API","title":"API","text":"CurrentModule = VIDA","category":"page"},{"location":"api/function_index/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"api/function_index/","page":"API","title":"API","text":"<!– ```@contents Pages = [\"function_index.md\"]","category":"page"},{"location":"api/function_index/","page":"API","title":"API","text":"\n## Index\n\n<!-- ```@index\nPages = [\"function_index.md\"]","category":"page"},{"location":"api/function_index/","page":"API","title":"API","text":"–>","category":"page"},{"location":"api/function_index/","page":"API","title":"API","text":"VIDA.VIDA\nVIDA.AbstractDivergence","category":"page"},{"location":"api/function_index/#VIDA.VIDA","page":"API","title":"VIDA.VIDA","text":"VIDA\n\nIs a image feature extraction tool for use with EHT images of black holes. It assumes that the image is close to one of the templates we have implemented and then tries to extract that feature from the image using one of the probability divergences implemented.\n\n\n\n\n\n","category":"module"},{"location":"api/function_index/#VIDA.AbstractDivergence","page":"API","title":"VIDA.AbstractDivergence","text":"abstract type AbstractDivergence\n\nDefines an AbstractDivergence type. This is the basic cost function of VIDA.\n\nA subtype of AbstractDivergence must be a struct with at least two fields\n\nimg::IntensityMap which holds the image you wish to run feature extraction on\nmimg::IntensityMap which is an internal buffer that stores the model image.\n\nThe divergence is evaluated roughly as\n\n    normalize_div(div, sum(divergence_point(div, image, model)))\n\nTherefore a user must implement the following methods\n\ndivergence_point: Which evaluates the divergence at a single pixel\nnormalize_div: Which normalizes and modifies the\n\n\n\n\n\n","category":"type"},{"location":"api/function_index/","page":"API","title":"API","text":"<!– @autodocs Modules = [VIDA] –>","category":"page"},{"location":"interface/#Interfaces","page":"Interfaces","title":"Interfaces","text":"","category":"section"},{"location":"interface/#Templates","page":"Interfaces","title":"Templates","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The template describe the image features we wish to extract.  As of 0.11 VIDA uses the ComradeBase.jl  and VLBISkyModels.jl interface. This means that any model that obeys that interface can be used within VIDA. Additionally VIDA defines a number of additional templates that are useful. For a complete list see the API page.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"For specifically VIDA we have created a AbstractImageTemplate subtype of the ComradeBase.AbstractModel type and partially implemented some functions.  For instance, we assume that ComradeBase.imanalytic(::Type{<:AbstractImageTemplate}) = IsAnalytic(). As such if an end user wants to implement a new feature they just need to implement","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"ComradeBase.intensity_point(m::MyNewTemplate, p)\nComradeBase.radialextent(m::MyNewTemplate)","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Note we do not implement the flux of the templates since they are often difficult to calculate.","category":"page"},{"location":"interface/#Ring-Templates","page":"Interfaces","title":"Ring Templates","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"As of VIDA 0.11 we also include a composite image template class called VIDA.RingTemplate.","category":"page"},{"location":"interface/#Divergence-AbstractDivergence","page":"Interfaces","title":"Divergence AbstractDivergence","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"In order to extract a feature you need to create a probability divergence function. Currently the divergences are defined using  a VIDA.AbstractDivergence type. The general user-facing interface is","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"bh = Bhattacharyya(image) #make the Bh divergence\nkl = KullbackLeibler(image) #makes the KL divergence","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"to initialize the divergence. To evaluate the divergence on a template you use the VIDA.divergence function","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"divergence(bh, θ::AbstractTemplate)\ndivergence(kl, θ::AbstractTemplate)","category":"page"},{"location":"interface/#Extract-features-vida-and-VIDAProblem","page":"Interfaces","title":"Extract features vida and VIDAProblem","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The main goal of VIDA is to extract image features. To do this we need to define the template and parameterization we want to use.  The first step is to create a template function that takes in a NamedTuple and returns an <:ComradeBase.AbstractModel. For example","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"temp(θ) = GaussianRing(θ.r0, θ.σ, θ.x0, θ.y0)","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"For our search we also need to provide the domain over which we want to search","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"lower = (r0 = 5.0, σ = 0.1, x0 = -60.0, y0 = 60.0)\nupper = (r0 = 30.0, σ = 5.0, x0 = -60.0, y0 = 60.0)","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"We can then form our VIDA.VIDAProblem using the divergence defined above","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"prob = VIDAProblem(bh, temp, lower, upper)","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Finally, to get the optimal parameters and template we can call the VIDA.vida function","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"using OptimizationMetaheuristics\nxopt, opt_template, divmin = vida(prob, ECA())","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"warning: Warning\nOlder versions of VIDA also included a threaded version of vida. This no longer exists and would give a race condition if someone tried to use it at this point due to a difference in how divergence is calculated. If you want to run multiple copies of VIDA at once please use Julia's Distributed functionality.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#A-minimal-example-of-extracting-ring-features","page":"Getting Started","title":"A minimal example of extracting ring features","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The basic VIDA program mirrors the following structure","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using VIDA\n# load the image and plot it\nimage = load_fits(\"example/data/elliptical_gaussian_rot-0.00.fits\")\nplot(image)\n# Build the divergence we want to fit\nbh = Bhattacharyya(image)\n# Create the template to use\ntemplate(θ) = SlashedGaussianRing(θ.r0, θ.σ, θ.s, θ.ξ, θ.x0, θ.y0) + θ.floor*Constant(μas2rad(100.0))\n\n#Define our bounds\nlower = (r0 = μas2rad(5.0), σ=μas2rad(1.0), \n         s=0.001, ξ=-1π, \n         x0=-μas2rad(60.0), y0 = -μas2rad(60.0), \n         floor=1e-6)\nupper = (r0 = μas2rad(30.0), σ=μas2rad(15.0), \n         s=0.999, ξ=1π, \n         x0=μas2rad(60.0), y0 = μas2rad(60.0), \n         floor=100.0)\n\nprob = VIDAProblem(bh, template, lower, upper)\n# Load your optimizer and run VIDA\nusing OptimizationBBO\nxopt, opt_temp, divmin = vida(prob, BBO_adaptive_de_rand_1_bin(); maxiters=50_000)\n\n#plot the results\ntriptic(image, opt_temp)","category":"page"},{"location":"getting_started/#Idea-behind-VIDA","page":"Getting Started","title":"Idea behind VIDA","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"VIDA is based on the idea of interpreting the image as a probability distribution. Namely since any image is integrable, the space of images is in one-to-one correspondence with a probability distribution.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Therefore, our idea is very close to variational inference, hence the name (the) Variational Image Domain Analysis. Namely, where we view the image as a distribution and we aim to find a approximation of the distribution given some parametric family f_theta(xy), which for our purposes we will typically call a template.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The choice of template, depends on the problem of interest, namely what features we are interested in. Typically for the Event Horizon Telescope (EHT) where the images tend to be rings, we are interested in","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Radius r₀\nWidth or half width σ\nStructural asymmetry τ\nBrightness asymmetry s\nPosition angle ξ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"VIDA then defines a series of templates parameterize these features.","category":"page"},{"location":"getting_started/#Templates","page":"Getting Started","title":"Templates","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Currently we have 6 templates defined, although they all belong to the same family. For an example on how to see the process for defining your own template please see the Adding a Custom Template.","category":"page"},{"location":"getting_started/#Divergences","page":"Getting Started","title":"Divergences","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to extract features we first need a cost function that penalized our parameterized distributions f_theta(xy). Since we are considering the image as a probability distribution, one cost function would be the distance or divergence between two distributions. A probability divergence is just a functional that takes in two probability distributions p,q and is minimized iff pequiv q.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Divergences are defined by the abstract type VIDA.AbstractDivergence. Implementations of the this type are also expected to implement a functor that evaluates the divergence on some template.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The current recommended default template is the VIDA.Bhattacharyya divergence although all the  template give similar answers. ","category":"page"},{"location":"#VIDA.jl","page":"VIDA.jl","title":"VIDA.jl","text":"","category":"section"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"Variational image domain analysis for the EHT. This package is for extracting features, such as ring from image reconstruction of EHT data. Currently these images must be in fits format although other types may be included in the future.","category":"page"},{"location":"#Installation","page":"VIDA.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"VIDA is a registered Julia package to install","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"using Pkg; Pkg.add(\"VIDA\")","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"or go to the repl and simply type ]add VIDA. Note that we require a Julia version >= 1.4.","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"Some additional dependencies that enable full functionality can be added with","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"Pkg.add.([\"Plots\",\"ArgParse\"])","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"Plots.jl is required to use some of the plotting recipes defined in the package and ArgParse is used for some of the scripts in the example folder.","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"To extract features we use probability divergences to characterize differences between our image and some approximation. For the divergences implemented see the Getting Started page. The idea is then very similar to variational inferences where we pick a parametric family of distributions which we call templates and then try to find the template that minimizes the divergence. For the templates that are currently implemented please see the page.","category":"page"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"See the API for the complete list of documented functions and types.","category":"page"},{"location":"#Outline","page":"VIDA.jl","title":"Outline","text":"","category":"section"},{"location":"","page":"VIDA.jl","title":"VIDA.jl","text":"Pages = [\n  \"index.md\",\n  \"getting_started.md\",\n  \"interface.md\",\n  \"generated/introduction.md\",\n  \"generated/custom_template.md\",\n  \"api/function_index.md\"\n]","category":"page"}]
}
